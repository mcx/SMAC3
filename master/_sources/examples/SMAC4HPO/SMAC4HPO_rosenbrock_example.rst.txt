.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_SMAC4HPO_SMAC4HPO_rosenbrock_example.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_SMAC4HPO_SMAC4HPO_rosenbrock_example.py:


===================================================
Using SMAC tuned for HPO for black-box optimization
===================================================




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Default Value: 16916.00
    Optimizing! Depending on your machine, this might take a few minutes.






|


.. code-block:: default


    import logging
    logging.basicConfig(level=logging.INFO)

    import numpy as np
    from ConfigSpace.hyperparameters import UniformFloatHyperparameter

    # Import ConfigSpace and different types of parameters
    from smac.configspace import ConfigurationSpace
    from smac.facade.smac_hpo_facade import SMAC4HPO
    # Import SMAC-utilities
    from smac.scenario.scenario import Scenario

    __copyright__ = "Copyright 2021, AutoML.org Freiburg-Hannover"
    __license__ = "3-clause BSD"


    def rosenbrock_2d(x):
        """ The 2 dimensional Rosenbrock function as a toy model
        The Rosenbrock function is well know in the optimization community and
        often serves as a toy problem. It can be defined for arbitrary
        dimensions. The minimium is always at x_i = 1 with a function value of
        zero. All input parameters are continuous. The search domain for
        all x's is the interval [-5, 10].
        """
        x1 = x["x0"]
        x2 = x["x1"]

        val = 100. * (x2 - x1 ** 2.) ** 2. + (1 - x1) ** 2.
        return val


    if __name__ == "__main__":
        # Build Configuration Space which defines all parameters and their ranges
        cs = ConfigurationSpace()
        x0 = UniformFloatHyperparameter("x0", -5, 10, default_value=-3)
        x1 = UniformFloatHyperparameter("x1", -5, 10, default_value=-4)
        cs.add_hyperparameters([x0, x1])

        # Scenario object
        scenario = Scenario({"run_obj": "quality",  # we optimize quality (alternatively runtime)
                             "runcount-limit": 10,
                             # max. number of function evaluations; for this example set to a low number
                             "cs": cs,  # configuration space
                             "deterministic": "true"
                             })

        # Example call of the function
        # It returns: Status, Cost, Runtime, Additional Infos
        def_value = rosenbrock_2d(cs.get_default_configuration())
        print("Default Value: %.2f" % def_value)

        # Optimize, using a SMAC-object
        print("Optimizing! Depending on your machine, this might take a few minutes.")
        smac = SMAC4HPO(scenario=scenario,
                        rng=np.random.RandomState(42),
                        tae_runner=rosenbrock_2d)

        smac.optimize()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.857 seconds)


.. _sphx_glr_download_examples_SMAC4HPO_SMAC4HPO_rosenbrock_example.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: SMAC4HPO_rosenbrock_example.py <SMAC4HPO_rosenbrock_example.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: SMAC4HPO_rosenbrock_example.ipynb <SMAC4HPO_rosenbrock_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
