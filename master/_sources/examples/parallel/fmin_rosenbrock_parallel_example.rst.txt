.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_parallel_fmin_rosenbrock_parallel_example.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_parallel_fmin_rosenbrock_parallel_example.py:


============================================
Parallel Intensifier with No Intensification
============================================

This example showcases how to use dask to
launch parallel configurations via n_workers




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/scipy/stats/_qmc.py:1078: UserWarning: The balance properties of Sobol' points require n to be a power of 2.
      warnings.warn("The balance properties of Sobol' points require"
    Best x: [-0.54340177  0.28591288]; with cost: 2.390874






|


.. code-block:: default


    import logging
    logging.basicConfig(level=logging.INFO)

    from smac.intensification.simple_intensifier import SimpleIntensifier
    from smac.facade.func_facade import fmin_smac

    # --------------------------------------------------------------
    # We need to provide a pickable function and use __main__
    # to be compliant with multiprocessing API
    # Below is a work around to have a packaged function called
    # rosenbrock_2d
    # --------------------------------------------------------------
    import os
    import sys

    __copyright__ = "Copyright 2021, AutoML.org Freiburg-Hannover"
    __license__ = "3-clause BSD"


    # https://sphinx-gallery.github.io/stable/faq.html#why-is-file-not-defined-what-can-i-use
    cwd = os.path.dirname(__file__) if '__file__' in globals() else os.getcwd()
    sys.path.append(os.path.join(cwd))
    from rosenbrock_2d_delayed_func import rosenbrock_2d  # noqa: E402
    # --------------------------------------------------------------


    if __name__ == '__main__':
        # fmin_smac assumes that the function is deterministic
        # and uses under the hood the SMAC4HPO
        # n_workers tells the SMBO loop to execute in parallel
        x, cost, smac = fmin_smac(
            func=rosenbrock_2d,
            intensifier=SimpleIntensifier,
            x0=[-3, -4],
            bounds=[(-5, 10), (-5, 10)],
            maxfun=25,
            rng=3,
            n_jobs=4,
        )  # Passing a seed makes fmin_smac determistic

        print("Best x: %s; with cost: %f" % (str(x), cost))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  28.675 seconds)


.. _sphx_glr_download_examples_parallel_fmin_rosenbrock_parallel_example.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: fmin_rosenbrock_parallel_example.py <fmin_rosenbrock_parallel_example.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: fmin_rosenbrock_parallel_example.ipynb <fmin_rosenbrock_parallel_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
