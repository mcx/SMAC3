.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_function_minimization_fmin_rosenbrock_example.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_function_minimization_fmin_rosenbrock_example.py:


==========================
scipy-style fmin interface
==========================




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO:smac.utils.io.cmd_reader.CMDReader:Output to smac3-output_2021-10-10_07:20:02_854537
    INFO:smac.facade.smac_hpo_facade.SMAC4HPO:Optimizing a deterministic scenario for quality without a tuner timeout - will make SMAC deterministic and only evaluate one configuration per iteration!
    INFO:smac.initial_design.sobol_design.SobolDesign:Running initial design for 2 configurations
    INFO:smac.facade.smac_hpo_facade.SMAC4HPO:<class 'smac.facade.smac_hpo_facade.SMAC4HPO'>
    INFO:smac.optimizer.smbo.SMBO:Running initial design
    INFO:smac.intensification.intensification.Intensifier:First run, no incumbent provided; challenger is assumed to be the incumbent
    INFO:smac.intensification.intensification.Intensifier:First run, no incumbent provided; challenger is assumed to be the incumbent
    INFO:smac.intensification.intensification.Intensifier:Updated estimated cost of incumbent on 1 runs: 11690.4846
    INFO:smac.intensification.intensification.Intensifier:Challenger (11690.0601) is better than incumbent (11690.4846) on 1 runs.
    INFO:smac.intensification.intensification.Intensifier:Changes in incumbent:
    INFO:smac.intensification.intensification.Intensifier:  x1 : -2.815051511861384 -> -2.8139004314557674
    INFO:smac.intensification.intensification.Intensifier:  x2 : -2.881006710231304 -> -2.887293724969028
    INFO:smac.stats.stats.Stats:##########################################################
    INFO:smac.stats.stats.Stats:Statistics:
    INFO:smac.stats.stats.Stats:#Incumbent changed: 1
    INFO:smac.stats.stats.Stats:#Submitted target algorithm runs: 10 / 10.0
    INFO:smac.stats.stats.Stats:#Finished target algorithm runs: 10 / 10.0
    INFO:smac.stats.stats.Stats:#Configurations: 10
    INFO:smac.stats.stats.Stats:Used wallclock time: 3.10 / inf sec 
    INFO:smac.stats.stats.Stats:Used target algorithm runtime: 0.08 / inf sec
    INFO:smac.stats.stats.Stats:##########################################################
    INFO:smac.facade.smac_hpo_facade.SMAC4HPO:Final Incumbent: Configuration:
      x1, Value: -2.8139004314557674
      x2, Value: -2.887293724969028

    INFO:smac.facade.smac_hpo_facade.SMAC4HPO:Estimated cost of incumbent: 11690.060101
    Best x: [-2.81390043 -2.88729372]; with cost: 11690.060101






|


.. code-block:: default


    import logging
    logging.basicConfig(level=20)

    from smac.facade.func_facade import fmin_smac

    __copyright__ = "Copyright 2021, AutoML.org Freiburg-Hannover"
    __license__ = "3-clause BSD"


    def rosenbrock_2d(x):
        """ The 2 dimensional Rosenbrock function as a toy model
        The Rosenbrock function is well know in the optimization community and
        often serves as a toy problem. It can be defined for arbitrary
        dimensions. The minimium is always at x_i = 1 with a function value of
        zero. All input parameters are continuous. The search domain for
        all x's is the interval [-5, 10].
        """
        x1 = x[0]
        x2 = x[1]

        val = 100. * (x2 - x1 ** 2.) ** 2. + (1 - x1) ** 2.
        return val


    if __name__ == "__main__":
        # fmin_smac assumes that the function is deterministic
        # and uses under the hood the SMAC4HPO
        x, cost, _ = fmin_smac(func=rosenbrock_2d,
                               x0=[-3, -4],
                               bounds=[(-5, 10), (-5, 10)],
                               maxfun=10,
                               rng=3)  # Passing a seed makes fmin_smac determistic

        print("Best x: %s; with cost: %f" % (str(x), cost))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.111 seconds)


.. _sphx_glr_download_examples_function_minimization_fmin_rosenbrock_example.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: fmin_rosenbrock_example.py <fmin_rosenbrock_example.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: fmin_rosenbrock_example.ipynb <fmin_rosenbrock_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
