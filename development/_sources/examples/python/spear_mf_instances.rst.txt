
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/python/spear_mf_instances.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_python_spear_mf_instances.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_python_spear_mf_instances.py:


SPEAR-QCP with Multi-Fidelity on Instances
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We optimize the SPEAR algorithm on QCP to demonstrate the powerful SMAC4AC facade. Algorithm and
instance definition is done inside scenario file.

Moreover, we present you an alternative :term:`intensification<Intensification>` procedure "Successive Halving".

.. GENERATED FROM PYTHON SOURCE LINES 10-49

.. code-block:: default


    import logging

    logging.basicConfig(level=logging.INFO)

    from smac.facade.smac_ac_facade import SMAC4AC
    from smac.intensification.successive_halving import SuccessiveHalving
    from smac.scenario.scenario import Scenario

    __copyright__ = "Copyright 2021, AutoML.org Freiburg-Hannover"
    __license__ = "3-clause BSD"


    if __name__ == "__main__":
        scenario = Scenario("examples/commandline/spear_qcp/scenario.txt")

        # provide arguments for the intensifier like this
        intensifier_kwargs = {
            "n_seeds": 2,  # specify the number of seeds to evaluate for a non-deterministic target algorithm
            "initial_budget": 1,
            "eta": 3,
            "min_chall": 1,  # because successive halving cannot handle min_chall > 1
        }

        smac = SMAC4AC(
            scenario=scenario,  # scenario object
            intensifier_kwargs=intensifier_kwargs,  # arguments for Successive Halving
            # change intensifier to successive halving by passing the class.
            # it must implement `AbstractRacer`.
            intensifier=SuccessiveHalving,
        )

        # Start optimization
        try:
            incumbent = smac.optimize()
        finally:
            incumbent = smac.solver.incumbent

        print("Optimized configuration %s" % str(incumbent))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_examples_python_spear_mf_instances.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: spear_mf_instances.py <spear_mf_instances.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: spear_mf_instances.ipynb <spear_mf_instances.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
