
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/python/plot_simple_multi_objective.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_python_plot_simple_multi_objective.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_python_plot_simple_multi_objective.py:


Simple Multi-Objective
^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 6-78



.. image-sg:: /examples/python/images/sphx_glr_plot_simple_multi_objective_001.png
   :alt: plot simple multi objective
   :srcset: /examples/python/images/sphx_glr_plot_simple_multi_objective_001.png
   :class: sphx-glr-single-img





.. code-block:: default


    __copyright__ = "Copyright 2021, AutoML.org Freiburg-Hannover"
    __license__ = "3-clause BSD"

    import numpy as np
    from ConfigSpace.hyperparameters import UniformFloatHyperparameter
    from matplotlib import pyplot as plt

    from smac.configspace import ConfigurationSpace
    from smac.facade.smac_bb_facade import SMAC4BB
    from smac.scenario.scenario import Scenario


    def schaffer(x):
        f1 = np.square(x)
        f2 = np.square(np.sqrt(f1) - 2)

        return f1, f2


    def plot(all_x):
        plt.figure()
        for x in all_x:
            f1, f2 = schaffer(x)
            plt.scatter(f1, f2, c="blue", alpha=0.1)

        plt.show()


    def plot_from_smac(smac):
        rh = smac.get_runhistory()
        all_x = []
        for (config_id, _, _, _) in rh.data.keys():
            config = rh.ids_config[config_id]
            all_x.append(config["x"])

        plot(all_x)


    def tae(cfg):
        f1, f2 = schaffer(cfg["x"])
        return {"metric1": f1, "metric2": f2}


    if __name__ == "__main__":
        MIN_V = -2
        MAX_V = 2

        # Simple configspace
        cs = ConfigurationSpace()
        cs.add_hyperparameter(UniformFloatHyperparameter("x", lower=MIN_V, upper=MAX_V))

        # Scenario object
        scenario = Scenario(
            {
                "run_obj": "quality",  # we optimize quality (alternatively runtime)
                "runcount-limit": 50,  # max. number of function evaluations
                "cs": cs,  # configuration space
                "multi_objectives": "metric1, metric2",
                "limit_resources": False,
            }
        )

        smac = SMAC4BB(
            scenario=scenario,
            rng=np.random.RandomState(5),
            tae_runner=tae,
        )
        incumbent = smac.optimize()

        # Plot the evaluated points
        plot_from_smac(smac)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  37.584 seconds)


.. _sphx_glr_download_examples_python_plot_simple_multi_objective.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_simple_multi_objective.py <plot_simple_multi_objective.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_simple_multi_objective.ipynb <plot_simple_multi_objective.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
